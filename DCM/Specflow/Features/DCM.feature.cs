// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DCM.Specflow.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DCM Automation")]
    [NUnit.Framework.CategoryAttribute("chrome")]
    [NUnit.Framework.CategoryAttribute("SanityTest")]
    public partial class DCMAutomationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DCM.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DCM Automation", "\tDCM login with Chrome browser and verify DCM functionality ", ProgrammingLanguage.CSharp, new string[] {
                        "chrome",
                        "SanityTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 login into DCM. search and select practice from dashboard")]
        [NUnit.Framework.CategoryAttribute("test")]
        public virtual void _01LoginIntoDCM_SearchAndSelectPracticeFromDashboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 login into DCM. search and select practice from dashboard", null, new string[] {
                        "test"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1.AddRow(new string[] {
                        "Bay Medical Center - EM 3150"});
#line 8
 testRunner.Given("Enter practice name into search practice textbox and select searched practice.", ((string)(null)), table1, "Given ");
#line 11
 testRunner.Then("models should show from selected practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 verify Operational Model History")]
        public virtual void _02VerifyOperationalModelHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 verify Operational Model History", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
 testRunner.Given("click on operational model history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.Then("verify current operational model name and privious opearation model names", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03 Verify Floor Plan popup from Dashboard")]
        public virtual void _03VerifyFloorPlanPopupFromDashboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 Verify Floor Plan popup from Dashboard", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
 testRunner.Given("click on Floor Plan link and verify View, delete and upload floor plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.Then("verify uploaded image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04 Create model")]
        public virtual void _04CreateModel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 Create model", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
 testRunner.Given("click on create model tab from dashboard and click on Create Model using Free For" +
                    "m from popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Area2",
                        "Area3",
                        "Forecasted_Annual_Arrivals",
                        "Current_LWBS_rate",
                        "Admit_Percentage"});
            table2.AddRow(new string[] {
                        "FT",
                        "PIT",
                        "80000",
                        "3",
                        "12"});
#line 28
 testRunner.And("enter vlaues into Practice Metrics fields and click on next button or click on Ar" +
                    "rivals/ESL", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FT_ESI_3",
                        "PIT_ESI_3"});
            table3.AddRow(new string[] {
                        "20",
                        "5"});
#line 32
 testRunner.When("Arrivals/ESL tab opens enter vlaues into fileds and click on next button or click" +
                    " on Length of Stay", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Overall_Admit_LOS",
                        "Overall_Arrival_To_Admit_Decision",
                        "Main_Discharge_LOS",
                        "FT_Discharge_LOS",
                        "PIT_Discharge_LOS"});
            table4.AddRow(new string[] {
                        "120",
                        "60",
                        "90",
                        "30",
                        "30"});
#line 36
 testRunner.And("Length of Stay tab opens enter vlaues into fileds and click on next button or cli" +
                    "ck on Shifts", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "From_Time",
                        "To_Time"});
            table5.AddRow(new string[] {
                        "01:00",
                        "08:00"});
#line 40
 testRunner.When("Shifts tab opens enter vlaues into fileds and click on next button or click on Cl" +
                    "inician Productivity", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "main_phy_pph",
                        "main_app_pph",
                        "main_PhyFirstHour",
                        "main_appFirstHour",
                        "FT_Phy_pph",
                        "FT_App_PPH",
                        "FT_PhyfirstHour",
                        "FT_AppfirstHour",
                        "PIT_Phy_pph",
                        "PIT_App_PPH",
                        "PIT_PhyfirstHour",
                        "PIT_AppFirstHour"});
            table6.AddRow(new string[] {
                        "1.5",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1",
                        "1"});
#line 44
 testRunner.And("Clinician Productivity tab opens enter vlaues into fileds and click on next butto" +
                    "n or click on Clinician Cost", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Average_Cost_per_Physician_Hour",
                        "Average_Cost_per_APP_Hour",
                        "Average_Cost_per_Scribe_Hour"});
            table7.AddRow(new string[] {
                        "20",
                        "60",
                        "20"});
#line 47
 testRunner.When("Clinician Cost tab opens enter vlaues into fileds and click on next button or cli" +
                    "ck on Save Button", ((string)(null)), table7, "When ");
#line 51
 testRunner.Then("Model should be saved with values enter into save model popup.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05 Edit Model Details")]
        public virtual void _05EditModelDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 Edit Model Details", null, ((string[])(null)));
#line 53
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 54
 testRunner.Given("Select model other then operational model and click on edit model details button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("select operationa check box to make operationa model", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.Then("verify operation model history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
