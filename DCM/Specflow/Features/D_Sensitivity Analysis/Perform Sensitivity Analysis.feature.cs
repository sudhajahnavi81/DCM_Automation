// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DCM.Specflow.Features.D_SensitivityAnalysis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Perform Sensitivity Analysis")]
    [NUnit.Framework.CategoryAttribute("chrome")]
    public partial class PerformSensitivityAnalysisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Perform Sensitivity Analysis.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Perform Sensitivity Analysis", "\tVerify all the actions(update, refresh, reset, export and save) in Sensitivity A" +
                    "nalysis pages", ProgrammingLanguage.CSharp, new string[] {
                        "chrome"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Forecasted Monthly Arrivals tab in Patient Volume")]
        [NUnit.Framework.CategoryAttribute("sanity")]
        public virtual void VerifyForecastedMonthlyArrivalsTabInPatientVolume()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Forecasted Monthly Arrivals tab in Patient Volume", null, new string[] {
                        "sanity"});
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Forecasted_Annual_Volume",
                        "Percentage_Variation",
                        "JAN",
                        "FEB",
                        "MAR",
                        "APR",
                        "MAY",
                        "JUN",
                        "JUL",
                        "AUG",
                        "SEP",
                        "OCT",
                        "NOV",
                        "DEC"});
            table30.AddRow(new string[] {
                        "77000",
                        "2",
                        "5000",
                        "4000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "4000",
                        "4000",
                        "5000"});
#line 7
 testRunner.Given("Update data input fields and reset fields by clicking reset button", ((string)(null)), table30, "Given ");
#line 10
 testRunner.And("Clear fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "JAN",
                        "FEB",
                        "MAR",
                        "APR",
                        "MAY",
                        "JUN",
                        "JUL",
                        "AUG",
                        "SEP",
                        "OCT",
                        "NOV",
                        "DEC"});
            table31.AddRow(new string[] {
                        "5000",
                        "4000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "5000",
                        "4000",
                        "4000",
                        "5000"});
#line 11
 testRunner.When("Update data input fields and refresh fields by clicking refresh button", ((string)(null)), table31, "When ");
#line 14
 testRunner.And("Verify zoom graph for Forecasted Monthly Arrivals by month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then("Click on Actual Monthly Arrivals tab and verified updated tab are highlighted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Actual Monthly Arrival  tab in Patient Volume")]
        public virtual void VerifyActualMonthlyArrivalTabInPatientVolume()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Actual Monthly Arrival  tab in Patient Volume", null, ((string[])(null)));
#line 18
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "JAN",
                        "FEB",
                        "MAR",
                        "APR",
                        "MAY",
                        "JUN",
                        "JUL",
                        "AUG",
                        "SEP",
                        "OCT",
                        "NOV",
                        "DEC"});
            table32.AddRow(new string[] {
                        "5001",
                        "4001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "4001",
                        "4001",
                        "5001"});
#line 19
 testRunner.Given("Update Actual Monthly Arrival data input fields and reset fields by clicking rese" +
                    "t button", ((string)(null)), table32, "Given ");
#line 22
 testRunner.And("Clear fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "JAN",
                        "FEB",
                        "MAR",
                        "APR",
                        "MAY",
                        "JUN",
                        "JUL",
                        "AUG",
                        "SEP",
                        "OCT",
                        "NOV",
                        "DEC"});
            table33.AddRow(new string[] {
                        "5001",
                        "4001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "5001",
                        "4001",
                        "4001",
                        "5001"});
#line 23
 testRunner.When("Update Actual Monthly Arrival data input fields and refresh fields by clicking re" +
                    "fresh button", ((string)(null)), table33, "When ");
#line 26
 testRunner.And("Verify zoom graph for Forecasted Monthly Arrivals by month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.Then("Click on Forecasted Weekly Arrivals tab and verified updated tab are highlighted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
